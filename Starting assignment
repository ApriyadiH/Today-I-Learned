Temporal Dead Zone

Scope is related to declaring a variable. There are 3 type of scope in JavaScript.
=> Block Scope
Use {} (Braces) any variable declared inside the braces will be available inside the block. Use let, const.
=========================
{
  let jml_ayam = 2;
}
// jml_ayam can NOT be used here
=========================

=> local Scope 
function scope is also called as local scope. It is only available inside the function. Use var, let, const.
=========================
// code here can NOT use ayam

function myFunction() {
  let ayam = "Goreng";
  // code here CAN use ayam
}


// code here can NOT use ayam
=========================

=> Global Scope
variable that applied anywhere. Use var, let, const.
=========================
let ayam = "goreng";
// code here can use ayam

function myFunction() {
// code here can also use ayam
}
=========================


==================================================================================


Hoisting
a feature to still run a code line even though some variable are still undefined as long as you define it somewhere.
=========================
console.log(makanan);
var makanan = 'ayam';
=========================
for example the code above will still show a result "undefined"

Hoisting feature act differently depend on how you declare your variables.
For example with var.
it will always give "undefined" value when you declare it somwhere.
=========================
console.log(ayam); // undefined

var ayam = 'goreng';

console.log(ayam); // "goreng"
=========================

In different situation where you separed declaration of variable and assign the variable value.
=========================
var makanan;

console.log(makanan); // undefined

makanan = 'ayam';

console.log(makanan); // "ayam"
=========================

In case you never declare the variable.
=========================
console.log(makanan); // Uncaught ReferenceError: makanan is not defined
=========================

Example with let and const. 
it will give ReferenceError even though you declare it later.
=========================
console.log(makanan); // Uncaught ReferenceError: Cannot access 'makanan' before initialization

let makanan = 'ayam';  // Same behavior for variables declared with const
=========================

==================================================================================
 
Temporal Dead Zone
a zone where it will return ReferenceError for const and let.
It starts from the beginning of the variable scope to when the variable is declared
=========================
{
    // Start of bebek's TDZ
     let ayam = 'ayam';
   console.log(ayam); // "ayam" No problem at all for ayam.

   console.log(bebek); // ReferenceError because we're in the TDZ

   let bebek = 'bebek';  // End of foo's TDZ
}
=========================

Not only from top to bottom, it also applied on left to right. 
=========================
function ayamgoreng(ayam = goreng, goreng = 'goreng') {
    console.log(ayam);
  }
  ayamgoreng(); // Uncaught ReferenceError: Cannot access 'goreng' before initialization.

  // variable goreng is declared later after when it is already called when we tried to define variable ayam.
=========================


==================================================================================

Function Hoisting
=> like you lift the function declaration to the top.
=========================
theFunction(); // "work" this function is still working because the declaration is hoisted.

function theFunction() {
	console.log('work');
}
=========================

No hoising, still giving the same result
=========================
function theFunction() {
	console.log('work');
}

theFunction(); // "work" not hoisting but still working.
=========================


As we know there are declaration of variable and assign a value. When we assign a variable with function, it is called as Function expressions.
=========================
let theFunction = function() {
    alert( "Masak air, biar mateng" );
  };
=========================

Hoistings works for function declaration. But not for function expressions.
=========================
with_var(); // Uncaught TypeError: with_var is not a function. With_var is still undefined at this point. 
var with_var = function () { 
    console.log("doesn't work");
}

with_let(); // Uncaught ReferenceError: Cannot access 'with_let' before initialization/declaration.
let with_let = function () {
    console.log("doesn't work");
 }

with_const(); // Uncaught ReferenceError: Cannot access 'with_const' before initialization/declaration
const with_const = function () {
    console.log("doesn't work");
 }

function_without_any_declaration(); //Uncaught ReferenceError: function_without_any_declaration is not defined
=========================


==================================================================================
Execution context and call stack


A. Execution context 
Just imagine that Execution context is a box where you store the information that will be called later. To have better understanding about this box, first we must learn about how the javascript run the code. 

There are several process for running the code 
1. Creation Phase / Memory allocation phase
The code will collect all variable, check the scope of each variable and then collect this keyword. (this is a complex thing but in simple term, it is like an object.). This process will trying to connect the variable in function. Until all of it is defined or sent an error feedback. In this process, Javascript haven't assign any value to the variable.

All of these creation phase will be stored in execution context. Execution context is like a box where you store the information that will be called later.

2. Execution Phase / Code execution phase
In this phase, after the code is connected, it will run the mathematical logic and calculating the value of the variable. Showing text or storing data to database depend on what is written in the code.

=========================
B. Call Stack 
If execution context is like a box. Imagine that Call stack is a room or a bigger box. You will put the execution context inside that bigger box. You will stack it, first one will go to the bottom and will be removed last. The execution context on the top will be placed last and it is also will be removed first. With this way, Javascript will make sure everything run normally when it need more than 2 or more function to run a code.

Whatever you put inside this room/bigger box will be executed. Then later removed from the memory. After it is done with everything, Javascript will remove global execution.

For detailed step
1. Javascript run the code... it will put global execution context to the call stack. Now global execution context is in the most bottom/lowest place.
2. Whenever a function is executed, we will put it on the call stack.
3. If it call another function, we will put another execution context on the stack.
4. each function has its own execution context.
5. Until we end up with "return", then we will remove the function on the top. It will goes back to previous execution context.
6. This process will repeat until we remove the most bottom execution context which is global execution context.



=========================
const ayam = "ayam" // This is global, will be in global execution context.

function first_function(){ // This function will have its own execution context.
    let a = 1;
    b = second_function(); // Inside first_function execution context, we will stack another execution context (which is second_function)
    c = a + b;
    return c;
}

function second_function(){ // second_function will be placed on top and removed first.
    var d = 2;
    return d;
}
=========================

=========================
Call Stack illustration
1. Stack global
||                                         ||
||                                         ||
|| global execution context                ||
=============================================

2. Stack first_function()
||                                         ||
|| execution context for first_function()  ||
|| global execution context                ||
=============================================

3. Stack second_function()
|| execution context for second_function() ||
|| execution context for first_function()  ||
|| global execution context                ||
=============================================

4. Remove second_function() Because we found return after executing it.
||                                         ||
|| execution context for first_function()  ||
|| global execution context                ||
=============================================

5. Remove first_function(), because we found return again.
||                                         ||
||                                         ||
|| global execution context                ||
=============================================

6. Remove global execution context last and the code is executed.
||                                         ||
||                                         ||
||                                         ||
=============================================
==================================================================================

Scope chain and Information hiding.

Scope chain.
As we learned before, in creation phase/memory allocation phase, we will collect all variable and find the connection between each variables. From past example, variable d has its own scope but first_function() still has the access to it. The value is still undefined until the execution process. 

Information hiding
variable declared inside a function will has a limited scope. 
Some review from past.
=========================
// code here can NOT use ayam

function myFunction() {
  let ayam = "Goreng";
  // code here CAN use ayam
}


// code here can NOT use ayam
=========================
variable ayam is hidden inside the myFunction(). 

There is a way to make it available outside the function with "this"
=========================
function Rectangle() // capitalized name convention
{
    // private stuff
    var height;
    var width;
    
    // public stuff
    this.getArea = function(){
        return height*width;
    };
    
    this.setWidth = function(w){ // This function allow you to modify the height or private stuff outside the function.
        width = w;
    };
    
    this.setHeight = function(h){ // This function allow you to modify the height or private stuff outside the function.
        height = h;     
    };
    
    this.shapeType = 'rectangle';
}

var rect = new Rectangle(); // use new keyword
rect.setWidth(4);                                   
rect.setHeight(3);
alert(rect.getArea()); // alerts 12     
alert(rect.shapeType); // alerts 'rectangle'
alert(rect.height); // alerts 'undefined'

var rect2 = new Rectangle();
rect2.setWidth(10);
rect2.setHeight(2);
alert(rect2.getArea()); // alerts 20
alert(rect2.shapeType); // alerts 'rectangle'
alert(rect2.height); // alerts 'undefined'
=========================

